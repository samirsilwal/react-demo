{"version":3,"sources":["components/listItem.js","components/ContactList.js","model/Contact.js","components/Displaydetail.js","components/ContactDetail.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","this","props","contact","onclick","onClick","className","src","profileImage","alt","firstName","phone","Component","ContactList","contactList","onItemClick","isFavourite","onFav","map","key","contactId","Contact","id","email","contactAddress","city","address","state","country","zipCode","countryCode","streetAddress","lastName","Displaydetail","selectedContact","ContactDetail","shouldDisplay","selected","style","display","Search","filterItem","type","onChange","placeholder","App","handleOnClick","filter","setState","currentContact","handleOnSearch","e","filtered","includes","target","value","toUpperCase","fetch","then","response","json","forEach","val","tempContact","uuid","console","log","catch","err","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae743110.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass ListItem extends Component {\r\n    render() {\r\n        const {contact,onclick} =this.props;\r\n\r\n        return (\r\n            <li onClick={onclick}>\r\n                <div className = \"card\">\r\n                    <div className='image-wrapper'>\r\n                        <img src= {contact.profileImage} alt={contact.firstName}></img>\r\n                    </div>\r\n                    <div className = 'title-detail'>\r\n                        <p> {contact.firstName}</p>\r\n                        {contact.phone}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListItem;","import React, {Component} from 'react';\r\nimport ListItem from \"./listItem\";\r\nimport '../styles/listItem.css'\r\n\r\nclass ContactList extends Component {\r\n    render() {\r\n        const {contactList, onItemClick, isFavourite, onFav} = this.props;\r\n        return (\r\n            <div className='list-container'>\r\n\r\n                <ul>\r\n                    {\r\n                        contactList.map(contact => {\r\n                            return (\r\n                                <ListItem key = {contact.contactId} contact={contact} onclick={() => onItemClick(contact.contactId)} />\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactList;","function  Contact(contact, contactId) {\r\n\r\n    return {\r\n        contactId: contactId,\r\n        id: contact.id,\r\n        email: contact.email,\r\n        phone: contact.phone,\r\n        contactAddress: {\r\n            city: contact.address.city,\r\n            state: contact.address.state,\r\n            country: contact.address.country,\r\n            zipCode: contact.address.zipCode,\r\n            countryCode: contact.address.countryCode,\r\n            streetAddress: contact.address.streetAddress\r\n        },\r\n        lastName: contact.lastName,\r\n        firstName: contact.firstName,\r\n        profileImage: contact.profileImage\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default Contact;","import React, {Component} from 'react';\r\nimport  '../styles/display.css';\r\n\r\nclass Displaydetail extends Component {\r\n    render() {\r\n        const  {selectedContact} = this.props;\r\n        if (selectedContact == null || selectedContact.contactAddress == null) {\r\n            return <div></div>;\r\n        }\r\n        return (\r\n            <div className=\"detail-display\">\r\n                <div className='img-detail'>\r\n                    <img src={selectedContact.profileImage} alt={selectedContact.firstName}></img>\r\n                </div>\r\n                <p className = 'name-detail'>{selectedContact.firstName + ' '+ selectedContact.lastName}</p>\r\n                <span className='email'>{selectedContact.email}</span>\r\n\r\n                <hr />\r\n\r\n                <div className='contact-detail'>\r\n                    contact:\r\n                    <p>{selectedContact.phone}</p>\r\n                </div>\r\n                <div className='address-detail'>\r\n                    address:\r\n                    <p>{\r\n                        selectedContact.contactAddress.city + ', ' +\r\n                        selectedContact.contactAddress.state + ', ' +\r\n                        selectedContact.contactAddress.country\r\n\r\n                    }</p>\r\n                </div>\r\n\r\n                <div className='codes-detail'>\r\n                    Address-Codes:\r\n                    <p>\r\n                    <span className='zip'>zipCode : {selectedContact.contactAddress.zipCode}</span>\r\n                    <span className='country-code'>CountryCode : {selectedContact.contactAddress.countryCode}</span>\r\n\r\n                    </p>\r\n                </div>\r\n                <div className ='street'>StreetAddress : {selectedContact.contactAddress.streetAddress}</div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Displaydetail;","import React, {Component} from 'react';\r\nimport '../styles/listItem.css'\r\nimport Displaydetail from \"./Displaydetail\";\r\n\r\nclass ContactDetail extends Component {\r\n    render() {\r\n        const {shouldDisplay, onItemClick, selected} = this.props;\r\n        return (\r\n            <div  className=\"modal\" style={shouldDisplay ? {display: 'block'} : {display:'none'}}>\r\n\r\n\r\n                <div className=\"modal-content\">\r\n                    <div>\r\n                        <span className=\"close\" onClick={onItemClick}>&times;</span>\r\n\r\n                        <span>CONTACT DETAIL</span>\r\n                    </div>\r\n                    <Displaydetail selectedContact = {selected} />\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactDetail;","import React, {Component} from 'react';\r\n\r\nclass Search extends Component {\r\n    render() {\r\n        const {filterItem}= this.props;\r\n        return (\r\n                    <input type='text' onChange={filterItem} placeholder='search contact...'></input>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport './App.css';\nimport ContactList from \"./components/ContactList\";\nimport uuid from 'uuid';\nimport './model/Contact'\nimport Contact from \"./model/Contact\";\nimport ContactDetail from \"./components/ContactDetail\";\nimport Search from \"./components/Search\";\n\nclass  App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            contactList: [],\n            shouldDisplay:false,\n            filtered:[],\n            currentContact:{},\n        }\n    }\n\n    handleOnClick = (id) => {\n\n       const selectedContact =  this.state.contactList.filter(contact => contact.contactId === id);\n        this.setState({\n            shouldDisplay : !this.state.shouldDisplay,\n            currentContact: selectedContact[0]\n        })\n    }\n\n    handleOnSearch = (e) => {\n       const filtered= this.state.contactList.filter(contact => contact.firstName.includes(e.target.value.toUpperCase()));\n       this.setState({\n           filtered : filtered\n       })\n    }\n\n \n\n\n    componentDidMount() {\n\n        fetch('https://mock-io.herokuapp.com/users')\n            .then(response => response.json())\n            .then((value) => {\n                  value.forEach(val => {\n                      const tempContact = Contact(val, uuid());\n                      this.setState({\n                          contactList: [...this.state.contactList, tempContact],\n                          filtered : [...this.state.contactList, tempContact]\n                      })\n                  })\n                console.log(this.state.contactList)\n\n            })\n            .catch((err) => console.log(err))\n    }\n\n    render() {\n\n\n     return (\n         <div>\n             <div className='title'>CONTACTS</div>\n             <div className ='search-box'>\n                 <Search filterItem = {this.handleOnSearch} ></Search>\n             </div>\n             <ContactList  contactList = {this.state.filtered} onItemClick = {this.handleOnClick} />\n             <ContactDetail shouldDisplay={this.state.shouldDisplay} onItemClick = {this.handleOnClick} selected = {this.state.currentContact}/>\n         </div>\n     );\n\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}